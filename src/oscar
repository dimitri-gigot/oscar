#!/usr/bin/env gjs

imports.gi.versions.Gtk = '4.0'
const Gtk = imports.gi.Gtk
const Gdk = imports.gi.Gdk
const System = imports.system
const GLib = imports.gi.GLib



//////////////////////////////////////////////////////////////////////////////
// Globals
//////////////////////////////////////////////////////////////////////////////
const USER_HOME = GLib.get_home_dir()
const CONFIG_FOLDER_PATH = USER_HOME+'/.config/oscar/'

const arguments = ARGV
const configName = arguments[0] || 'default'
const config = getConfig(configName)

let win = null
const shortcuts = []
const widgets = {}

const app = new Gtk.Application({
    application_id: 'be.dim-dim.oscar'
});

const keycont = new Gtk.EventControllerKey()

//////////////////////////////////////////////////////////////////////////////
// Global listener
//////////////////////////////////////////////////////////////////////////////
keycont.connect('key-pressed', (controller, key, state, win) => {
    const value = String.fromCharCode(key)
    const shortcut = shortcuts.find((s) => s.shortcut === value)
    if(shortcut && shortcut.command){
        run_command(shortcut.command)
    }

    //esc
    if(key === 65307){
        quit()
    }
})



//////////////////////////////////////////////////////////////////////////////
// UTILS
//////////////////////////////////////////////////////////////////////////////

function getConfig(name){
    // check if file exist
    let configPath = CONFIG_FOLDER_PATH + name + '.json'
    if (!GLib.file_test(configPath, GLib.FileTest.EXISTS)){
        configPath = '/etc/oscar/'+name+'.json'
    }

    if (!GLib.file_test(configPath, GLib.FileTest.EXISTS)){
        console.error('Config file not found for name:', name)
        // kill the process
        System.exit(1)
    }
    const loaded = GLib.file_get_contents(configPath)
    const content = new TextDecoder('utf-8').decode(loaded[1])
    const config = JSON.parse(content)
    return Object.assign({
        "width": 400,
        "height": 1,
        "timeout": 0,
        "orientation": "vertical",
        "items": []
    }, config)
}

function applyTheme(theme){
    if(!theme) return
    let cssPath = CONFIG_FOLDER_PATH+'themes/'+theme+'/style.css'
    if (!GLib.file_test(cssPath, GLib.FileTest.EXISTS)){
        cssPath = '/etc/oscar/themes/'+theme+'/style.css'
    }

    if (!GLib.file_test(cssPath, GLib.FileTest.EXISTS)){
        console.error('Theme not found for theme:', theme)
        return
    }
    
    const cssProvider = new Gtk.CssProvider()
    cssProvider.load_from_path(cssPath)
        
    Gtk.StyleContext.add_provider_for_display(
        Gdk.Display.get_default(),
        cssProvider,
        Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
    );
}

function run_command(command){
    win.hide()

    let [success, pid] = GLib.spawn_async(
        null,           // Working directory (null means current directory)
        ["/bin/sh", "-c", command], // Command to run (e.g., `sh -c 'your command here'`)
        null,           // Environment variables (null means default environment)
        GLib.SpawnFlags.SEARCH_PATH,  // Search for the command in $PATH
        null            // Callback (null means we don't care about the output)
    );

    quit()
}

function getCommandOutput(command){
    const [res, out, err] = GLib.spawn_command_line_sync(command)
    return new TextDecoder('utf-8').decode(out).trim()
}

function registerWidget(type, constructor){
    widgets[type] = constructor
}

function quit(){
    win.destroy()
    app.quit()
}

function createWindow(){
    win = new Gtk.ApplicationWindow({ application: app });
    win.set_title('Window');
    
    win.set_default_size(config.width, config.height)
    win.set_resizable(false);
    win.set_modal(true);

    const parent = Gtk.Box.new(Gtk.Orientation.VERTICAL, 0)
    parent.add_css_class('main')
    loopItems(config.items, parent)

    win.set_child(parent);

    win.connect('destroy', () => {
        app.quit()
    })

    if(config.timeout > 0){
        GLib.timeout_add_seconds(GLib.PRIORITY_DEFAULT, config.timeout, () => {
            quit()
            return GLib.SOURCE_REMOVE
        })
    }
}

function loopItems(items, parent){
    items.forEach((item) => {
        if(item.disabled) return

        let type = item.type || 'button'
        type = type.toLowerCase()

        let widget = null

        if(widgets[type]) widget = widgets[type](item)
        else console.error('Widget not found:', type)

        if (widget){
            if(item.class_name){
                item.class_name.split(' ').forEach((c) => {
                    widget.add_css_class(c)
                })
            }
            widget.add_css_class('widget__'+type)
            widget.add_css_class('widget')
            widget.set_hexpand(true)
            parent.append(widget)
        }
    })
}



//////////////////////////////////////////////////////////////////////////////
// WIDGETS
//////////////////////////////////////////////////////////////////////////////

registerWidget('output', (item) => {
    const label = new Gtk.Label()
    const interval = item.interval || 0
    const command = item.command || 'echo "No command provided"'
    function update(){
        const output = getCommandOutput(command).trim()
        label.set_text(output)
        if(interval>0){
            GLib.timeout_add_seconds(GLib.PRIORITY_DEFAULT, interval, update)
        }
    }
    update()
    return label
})

registerWidget('group', (item) => {
    const gtkOrientation = item.orientation === 'horizontal' ? Gtk.Orientation.HORIZONTAL : Gtk.Orientation.VERTICAL
    const group = Gtk.Box.new(gtkOrientation, 0)
    loopItems(item.items, group)
    return group
})

registerWidget('runner', (item) => {
    const runner = new Gtk.Entry()
    runner.connect('activate', () => {
        const command = runner.get_text()
        if(command){
            run_command(command)
        }else{
            quit()
        }
    })
    return runner
})

registerWidget('button', (item) => {
    const command = item.command
    const shortcut = item.shortcut

    const label = item.label//(shortcut ? '[ '+shortcut+' ] ' : '')+item.label

    const button = new Gtk.Button({ label })
    if(shortcut && command){
        shortcuts.push({ shortcut, command })
    }

    button.connect('clicked', () => {
        if(command){
            run_command(command)
        }else{
            quit()
        }
    })

    return button
})

registerWidget('separator', (item) => {
    const separator = new Gtk.Separator()
    return separator
})

//////////////////////////////////////////////////////////////////////////////
// RUN
//////////////////////////////////////////////////////////////////////////////

app.connect('activate', () => {
    createWindow()
    win.add_controller(keycont)
    applyTheme(config.theme)

    win.present()
});
app.run([]);
